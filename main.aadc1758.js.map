{"version":3,"sources":["scripts/main.js"],"names":["cellsBeforeMove","fieldRows","document","querySelector","rows","scoreBoard","startBtn","messageStart","messageWin","messageLose","columns","score","field","checkIfMoveOccurred","row","col","updateCell","cell","num","innerText","classList","value","add","String","updateGame","cells","checkIfEmpty","setNewCell","checkIfPossible","Math","random","check","floor","filterRow","filter","el","move","newRow","i","length","isFinite","checkIfWin","push","moveLeft","r","moveRight","reverse","moveUp","moveDown","remove","checkIfLose","addEventListener","type","JSON","parse","stringify","contains","code"],"mappings":"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","file":"main.aadc1758.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst fieldRows = document.querySelector('tbody').rows;\nconst scoreBoard = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.start');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\n\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet cellsBeforeMove;\n\nfunction checkIfMoveOccurred() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (field[row][col] !== cellsBeforeMove[row][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nstartBtn.addEventListener('click', () => {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  updateGame();\n  setNewCell();\n  setNewCell();\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startBtn.classList.add('restart');\n  startBtn.innerText = 'Restart';\n});\n\ndocument.addEventListener('keyup', type => {\n  cellsBeforeMove = JSON.parse(JSON.stringify(field));\n\n  switch (startBtn.classList.contains('restart')) {\n    case type.code === 'ArrowLeft':\n      moveLeft();\n\n      break;\n\n    case type.code === 'ArrowRight':\n      moveRight();\n      break;\n\n    case type.code === 'ArrowUp':\n      moveUp();\n      break;\n\n    case type.code === 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  if (checkIfMoveOccurred()) {\n    setNewCell();\n  }\n\n  if (!checkIfPossible()) {\n    checkIfLose();\n  }\n});\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = String(num);\n    cell.classList.add(`field-cell--${String(num)}`);\n  }\n}\n\nfunction updateGame() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      const currentCell = fieldRows[row].cells[col];\n      const num = field[row][col];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreBoard.innerText = String(score);\n}\n\nfunction checkIfEmpty() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (field[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setNewCell() {\n  if (!checkIfEmpty() || !checkIfPossible()) {\n    return;\n  }\n\n  const value = Math.random() > 0.1 ? 2 : 4;\n\n  let check = false;\n\n  while (!check) {\n    const row = Math.floor(Math.random() * rows);\n    const col = Math.floor(Math.random() * columns);\n\n    if (field[row][col] === 0) {\n      field[row][col] = value;\n      check = true;\n\n      updateGame();\n    }\n  }\n}\n\nfunction filterRow(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction move(row) {\n  let newRow = filterRow(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      checkIfWin(newRow[i]);\n    }\n  }\n\n  newRow = filterRow(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row = move(row);\n    field[r] = row;\n  }\n\n  updateGame();\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n    row = move(row);\n    row.reverse();\n    field[r] = row;\n  }\n\n  updateGame();\n}\n\nfunction moveUp() {\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row = move(row);\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  updateGame();\n}\n\nfunction moveDown() {\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row.reverse();\n    row = move(row);\n    row.reverse();\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  updateGame();\n}\n\nfunction checkIfPossible() {\n  let check = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (row < 3) {\n        if (field[row][col] === field[row + 1][col]\n          || field[row][col] === field[row][col + 1]) {\n          check = true;\n        }\n      }\n    }\n  }\n\n  if (!check && !checkIfEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkIfWin(value) {\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n    startBtn.classList.remove('restart');\n    startBtn.innerText = 'Start';\n  }\n}\n\nfunction checkIfLose() {\n  messageLose.classList.remove('hidden');\n  startBtn.classList.remove('restart');\n  startBtn.innerText = 'Start';\n}\n"]}